# Copyright (c) 2017, Los Alamos National Security, LLC
# All rights reserved.

# Copyright 2017. Los Alamos National Security, LLC. This software was
# produced under U.S. Government contract DE-AC52-06NA25396 for Los
# Alamos National Laboratory (LANL), which is operated by Los Alamos
# National Security, LLC for the U.S. Department of Energy. The
# U.S. Government has rights to use, reproduce, and distribute this
# software.  NEITHER THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY,
# LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY
# FOR THE USE OF THIS SOFTWARE.  If software is modified to produce
# derivative works, such modified software should be clearly marked, so
# as not to confuse it with the version available from LANL.
 
# Additionally, redistribution and use in source and binary forms, with
# or without modification, are permitted provided that the following
# conditions are met:

# 1.  Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
# 3.  Neither the name of Los Alamos National Security, LLC, Los Alamos
# National Laboratory, LANL, the U.S. Government, nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
 
# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL LOS
# ALAMOS NATIONAL SECURITY, LLC OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



diff -rupN trilinos-11.6.1-source/packages/ifpack/src/Ifpack_Hypre.cpp trilinos-11.6.1-source-patch/packages/ifpack/src/Ifpack_Hypre.cpp
--- trilinos-11.6.1-source/packages/ifpack/src/Ifpack_Hypre.cpp	2014-01-29 16:05:21.000000000 -0700
+++ trilinos-11.6.1-source-patch/packages/ifpack/src/Ifpack_Hypre.cpp	2014-02-06 11:08:43.727635000 -0700
@@ -81,7 +81,7 @@ Ifpack_Hypre::Ifpack_Hypre(Epetra_RowMat
   MPI_Comm comm = GetMpiComm();
   int ilower = A_->RowMatrixRowMap().MinMyGID();
   int iupper = A_->RowMatrixRowMap().MaxMyGID();
-  // Need to check if the RowMap is the way Hypre expects (if not more difficult)
+  // Need to check if the RowMap is the GID-contiguous, as expected by Hypre
   std::vector<int> ilowers; ilowers.resize(Comm().NumProc());
   std::vector<int> iuppers; iuppers.resize(Comm().NumProc());
   int myLower[1]; myLower[0] = ilower;
@@ -91,13 +91,35 @@ Ifpack_Hypre::Ifpack_Hypre(Epetra_RowMat
   for(int i = 0; i < Comm().NumProc()-1; i++){
     NiceRowMap_ = (NiceRowMap_ && iuppers[i]+1 == ilowers[i+1]);
   }
-  if(!NiceRowMap_){
-    ilower = (A_->NumGlobalRows() / Comm().NumProc())*Comm().MyPID();
-    iupper = (A_->NumGlobalRows() / Comm().NumProc())*(Comm().MyPID()+1)-1;
-    if(Comm().MyPID() == Comm().NumProc()-1){
-      iupper = A_-> NumGlobalRows()-1;
-    }
-  }
+
+  if (!NiceRowMap_) {
+    // Must create simple ColumnMap to map indices via LID.
+    //   Epetra_GID  --------->   LID   ----------> HYPRE_GID
+    //           via RowMap.LID()       via SimpleColumnMap.GID()
+    MySimpleMap_ = rcp(new Epetra_Map(-1, A_->RowMatrixRowMap().NumMyElements(),
+            0, Comm()));
+
+    Epetra_Import importer(A_->RowMatrixColMap(), A_->RowMatrixRowMap());
+    Epetra_IntVector MyGIDsHYPRE(A_->RowMatrixRowMap());
+    for (int i=0; i!=A_->RowMatrixRowMap().NumMyElements(); ++i)
+      MyGIDsHYPRE[i] = MySimpleMap_->GID(i);
+
+    // import the HYPRE GIDs
+    Epetra_IntVector ColGIDsHYPRE(A_->RowMatrixColMap());
+    IFPACK_CHK_ERRV(ColGIDsHYPRE.Import(MyGIDsHYPRE, importer, Insert, 0));
+
+    // Make a HYPRE numbering-based column map.
+    MySimpleColumnMap_ = rcp(new Epetra_Map(-1,ColGIDsHYPRE.MyLength(),
+            &ColGIDsHYPRE[0], 0, Comm()));
+
+  } else {
+    MySimpleMap_ = rcp(new Epetra_Map(A_->RowMatrixRowMap()));
+    MySimpleColumnMap_ = rcp(new Epetra_Map(A_->RowMatrixColMap()));
+  }
+
+  // ilower and iupper are now valid for either NiceRowMap_ or not
+  ilower = MySimpleMap_->GID(0);
+  iupper = MySimpleMap_->GID(A_->RowMatrixRowMap().NumMyElements()-1);
 
   // Next create vectors that will be used when ApplyInverse() is called
   IFPACK_CHK_ERRV(HYPRE_IJVectorCreate(comm, ilower, iupper, &XHypre_));
@@ -117,11 +139,6 @@ Ifpack_Hypre::Ifpack_Hypre(Epetra_RowMat
 
   YVec_ = (hypre_ParVector *) hypre_IJVectorObject(((hypre_IJVector *) YHypre_));
   YLocal_ = hypre_ParVectorLocalVector(YVec_);
-  std::vector<int> rows; rows.resize(iupper - ilower +1);
-  for(int i = ilower; i <= iupper; i++){
-    rows[i-ilower] = i;
-  }
-  MySimpleMap_ = rcp(new Epetra_Map(-1, iupper-ilower+1, &rows[0], 0, Comm()));
 } //Constructor
 
 //==============================================================================
@@ -158,10 +175,10 @@ int Ifpack_Hypre::Initialize(){
     int numEntries;
     IFPACK_CHK_ERR(A_->ExtractMyRowCopy(i, numElements, numEntries, &values[0], &indices[0]));
     for(int j = 0; j < numEntries; j++){
-      indices[j] = A_->RowMatrixColMap().GID(indices[j]);
+      indices[j] = MySimpleColumnMap_->GID(indices[j]);
     }
     int GlobalRow[1];
-    GlobalRow[0] = A_->RowMatrixRowMap().GID(i);
+    GlobalRow[0] = MySimpleMap_->GID(i);
     IFPACK_CHK_ERR(HYPRE_IJMatrixSetValues(HypreA_, 1, &numEntries, GlobalRow, &indices[0], &values[0]));
   }
   IFPACK_CHK_ERR(HYPRE_IJMatrixAssemble(HypreA_));
diff -rupN trilinos-11.6.1-source/packages/ifpack/src/Ifpack_Hypre.h trilinos-11.6.1-source-patch/packages/ifpack/src/Ifpack_Hypre.h
--- trilinos-11.6.1-source/packages/ifpack/src/Ifpack_Hypre.h	2014-01-29 16:05:21.000000000 -0700
+++ trilinos-11.6.1-source-patch/packages/ifpack/src/Ifpack_Hypre.h	2014-02-06 11:08:47.392424000 -0700
@@ -661,6 +661,8 @@ private:
   Hypre_Chooser SolveOrPrec_;
   //! This is a linear map used the way it is in Hypre
   Teuchos::RefCountPtr<Epetra_Map> MySimpleMap_;
+  //! This is a linear map used the way it is in Hypre
+  Teuchos::RefCountPtr<Epetra_Map> MySimpleColumnMap_;
   //! Counter of the number of parameters set
   int NumFunsToCall_;
   //! Which solver was chosen
